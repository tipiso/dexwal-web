---
import { AppLangEnum } from "src/lib/types";

const supportedLocales = Object.values(AppLangEnum).map((l) => l);
import { getTranslations } from "../locale/getTranslations";
const locale = Astro.currentLocale ?? "";
const t = getTranslations(locale).components.navigation;
---

<style>
  .languageSwitcher {
    border: none;
    font-weight: 700;
    background-color: transparent;
    cursor: pointer;
  }
</style>

<label for="langSelect" class="sr-only">{t.languagePickerLabel}</label>
<select id="langSelect" class="languageSwitcher otherText">
  {
    supportedLocales.map((l) => (
      <option value={l} selected={locale === l}>
        {l.toUpperCase()}
      </option>
    ))
  }
</select>

<script>
  import { AppLangEnum } from "@src/lib/types";

  window.addEventListener("DOMContentLoaded", () => {
    const getCurrentLanguage = () => {
      const pathParts = window.location.pathname.split("/");
      const currLang = supportedLocales.includes(pathParts[1])
        ? pathParts[1]
        : AppLangEnum.PL;
      return currLang;
    };

    const getNewProductsPath = (newLang: string) => {
      const pathParts = window.location.pathname.split("/");
      const productsIdx = pathParts.indexOf("products");
      const currLang = getCurrentLanguage();

      const currProductsList = document.getElementById(currLang);
      const newProductsList = document.getElementById(newLang);
      const currProductId = pathParts[productsIdx + 1];

      let productImgToFind: string = "";
      if (currProductsList) {
        Array.from(currProductsList.children).forEach((node) => {
          const { productid, heroid } = node.dataset;
          if (currProductId === productid) productImgToFind = heroid;
        });
      }

      let nextProduct: string = "";
      if (newProductsList) {
        Array.from(newProductsList.children).forEach((node) => {
          const { productid, heroid } = node.dataset;
          if (productImgToFind === heroid) nextProduct = productid;
        });
      }

      return `/products/${nextProduct}`;
    };

    const supportedLocales: string[] = Object.values(AppLangEnum).map((l) => l);
    const currLang = getCurrentLanguage();
    const selects = document.getElementsByClassName("languageSwitcher");

    Array.from(selects).forEach((select) => {
      if (select && "value" in select) {
        select.value = currLang;

        select.addEventListener("change", function (e) {
          const newLang = e.target.value;
          // 1st is always a home slash
          let pathParts = window.location.pathname.split("/");

          const hasProductsContext =
            window.location.pathname.includes("products");
          let newProductsPath;
          if (hasProductsContext) {
            newProductsPath = getNewProductsPath(newLang);
            window.location.href =
              newLang === AppLangEnum.PL
                ? `${newProductsPath}`
                : `/${newLang}${newProductsPath}`;
            return;
          }

          if (newLang === AppLangEnum.PL) {
            // redirect to default locale without prefix
            pathParts.splice(1, 1); // remove the current prefix
          } else {
            if (supportedLocales.includes(pathParts[1])) {
              pathParts[1] = newLang;
            } else {
              const [index, currFirst, ...rest] = pathParts;
              pathParts = [index, newLang, currFirst, ...rest];
            }
          }

          const newPath = pathParts.join("/") || "/";

          window.location.href = newPath;
        });
      }
    });
  });
</script>
