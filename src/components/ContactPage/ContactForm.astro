---
import Button from "@components/Button.astro";
import { getTranslations } from "src/locale/getTranslations";
const locale = Astro.currentLocale;
const t = getTranslations(locale).contactPage.contactForm;

// Form fields array
const formFields = [
  {
    id: "name",
    label: t.name,
    type: "text",
    placeholder: "",
    required: false,
  },
  {
    id: "phone",
    label: t.phone,
    type: "tel",
    placeholder: "",
    required: false,
  },
  {
    id: "email",
    label: t.email,
    type: "email",
    placeholder: "",
    required: true,
  },
  {
    id: "message",
    label: t.message,
    type: "textarea",
    placeholder: "",
    required: true,
    maxLength: 400,
  },
];
---

<style>
  /* Form Styles */
  .contactForm {
    margin-bottom: 32px;
  }

  .formGroup {
    margin-bottom: 16px;
  }

  label {
    display: block;
    margin-bottom: 4px;
  }

  .required {
    color: #e63946;
  }

  input,
  textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--light-gray-color);
    background-color: var(--white-color);
    color: var(--black-color);
    border-radius: 5px;
    font-family: inherit;
  }

  textarea {
    min-height: 120px;
    resize: vertical;
  }

  .charCounter {
    text-align: left;
    color: var(--gray-color);
  }

  .checkboxGroup {
    display: flex;
    align-items: flex-start;
  }

  .checkboxGroup input {
    width: 20px;
    height: 20px;
    border: 1px solid var(--light-gray-color);
    margin-right: 10px;
  }
</style>

<form id="contactForm" class="contactForm">
  {
    formFields.map((field) => (
      <div class="formGroup">
        <label for={field.id} class="smallerText">
          {field.label} {field.required && <span class="required">*</span>}
        </label>
        {field.type === "textarea" ? (
          <textarea
            id={field.id}
            name={field.id}
            placeholder={field.placeholder}
            required={field.required}
            maxlength={field.maxLength}
            data-max-length={field.maxLength}
          />
        ) : (
          <input
            type={field.type as astroHTML.JSX.HTMLInputTypeAttribute}
            id={field.id}
            name={field.id}
            placeholder={field.placeholder}
            required={field.required}
          />
        )}
        {field.type === "textarea" && (
          <div class="charCounter smallerText">
            <span id="charCount">0</span>/{field.maxLength}
          </div>
        )}
      </div>
    ))
  }

  <div class="formGroup checkboxGroup">
    <input type="checkbox" id="privacy" name="privacy" required />
    <label for="privacy" class="smallerText">
      {t.privacy}
    </label>
  </div>

  <Button label="Wyślij wiadomość" type="primary" />
</form>

<script>
  // Initialize Lucide icons
  document.addEventListener("DOMContentLoaded", () => {
    // Character counter for textarea
    const messageTextarea = document.querySelector("textarea[data-max-length]");
    const charCountElement = document.getElementById("charCount");

    if (messageTextarea && charCountElement) {
      messageTextarea.addEventListener("input", function (e) {
        const currentLength = this.value.length;
        charCountElement.textContent = currentLength;
      });
    }

    // Form submission
    const contactForm = document.getElementById("contactForm");
    if (contactForm) {
      contactForm.addEventListener("submit", function (e) {
        e.preventDefault();

        // Here you would normally send the form data to a server
        // For demonstration, we'll just show an alert
        alert(
          "Formularz został wysłany! W normalnych warunkach, dane zostałyby przesłane do serwera."
        );

        // Reset form
        this.reset();
        if (charCountElement) charCountElement.textContent = "0";
      });
    }
  });
</script>
