---
import Button from '@components/Button.astro';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { getProductsByCategory, getProductsByLanguage } from 'src/lib/products';
import { getTranslations } from 'src/locale/getTranslations';
import Product from '../Product.astro';
const locale = Astro.currentLocale;
const t = getTranslations(locale).components.productsSection;

const { sectionLabel, linkProducts, classes, productCategory, maxListLength = undefined, maxVisibleByScreen = false } = Astro.props;

let data, products;
if (!productCategory) {
  data = await getProductsByLanguage(3, locale);
  products = data.languages.nodes.flatMap((l) =>
    l.products.nodes.flatMap((p) => ({
      id: p.id,
      image: p.heroPhoto.node.srcSet,
      title: p.heroHeader,
    })),
  );
} else {
  data = await getProductsByCategory(productCategory);
  products = data.productcategories.nodes
    .flatMap((pn) => pn.products.nodes)
    .filter((p) => {
      if (p.languages.nodes.some((l) => l.slug === locale)) return true;
      return false;
    })
    .map((p) => ({
      id: p.id,
      image: p.heroPhoto.node.srcSet,
      title: p.heroHeader,
    }))
    .slice(0, maxListLength);
}
---

<style>
  .productSection {
    padding: 32px 80px;

    h2 {
      padding-bottom: 24px;
    }

    .button {
      margin: 30px auto 0;
    }
  }
  .productsWrapper {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .linkWrapper {
    display: block;
    width: 100%;
    text-align: center;
  }

  @media (max-width: 1200px) {
    .productSection {
      padding: 32px 0;
    }
  }

  @media (max-width: 800px) {
    .productsWrapper {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 600px) {
    .productsWrapper {
      grid-template-columns: 1fr;
    }
  }
</style>

<div class:list={[classes, 'productSection']}>
  {sectionLabel && <h2 class="secondaryTitle">{sectionLabel}</h2>}
  <div class:list={['productsWrapper']} data-limit={maxVisibleByScreen ? 'true' : 'false'}>
    {products.map((p) => <Product productId={p.id} image={p.image} title={p.title} />)}
  </div>
  {
    linkProducts && (
      <a href={getRelativeLocaleUrl(locale ?? '', `/offer`)} class="linkWrapper">
        <Button label={t.button} type="outline" />
      </a>
    )
  }
</div>


{maxVisibleByScreen && (
  <script type="module">
    const breakpoints = [
      { maxWidth: 600, count: 1 },
      { maxWidth: 800, count: 2 },
      { maxWidth: Infinity, count: 3 },
    ];

    function updateVisibleProducts() {
      const width = window.innerWidth;
      const limit = breakpoints.find(b => width <= b.maxWidth).count;
      document.querySelectorAll('.productsWrapper[data-limit="true"]').forEach(grid => {
        const cards = grid.querySelectorAll('.product');
        cards.forEach((card, index) => {
          card.style.display = index < limit ? 'flex' : 'none';
        });
      });
    }

    window.addEventListener('resize', updateVisibleProducts);
    window.addEventListener('DOMContentLoaded', updateVisibleProducts);
  </script>
)}